const fs = require("fs");
const tesseract = require("node-tesseract-ocr");
const path = require("path");

const config = {
  lang: "eng",
  oem: 1,
  psm: 3,
}
// global.Buffer = global.Buffer || require('buffer').Buffer;

// if (typeof btoa === 'undefined') {
//   global.btoa = function (str,size) {
//     return new Buffer.alloc(size, str, 'binary').toString('base64');
//   };
// }

// if (typeof atob === 'undefined') {
//   global.atob = function (b64Encoded, size) {
//     return new Buffer.alloc(size, b64Encoded, 'base64').toString('utf-8');
//   };
// }
// Define the string
// var str = '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'
// Encode the String
// var encodedString = btoa(str, 13);
// console.log(encodedString); // Outputs: "SGVsbG8gV29ybGQh"

// Decode the String
// var decodedString = atob(str, str.length);
// console.log(decodedString); // Outputs: "Hello World!"


const img = fs.readFileSync("../number.png")

tesseract
  .recognize(img, config)
  .then((text) => {
    console.log("Result:", text)
  })
  .catch((error) => {
    console.log(error.message)
  })

